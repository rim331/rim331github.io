[
    {
        "code_id": 1,
        "original_code": "public int sumArray(int[] numbers) {\n    int total = 0;\n    for (int number : numbers) {\n        total += number;\n    }\n    return total;\n}",
        "obfuscated_code": "public int sumArray(int[] a) {\n    int b = 0;\n    for (int c : a) {\n        b += c;\n    }\n    return b;\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
      {
        "code_id": 2,
        "original_code": "public String findSubstring(String text, String pattern) {\n    return text.contains(pattern) ? \"Found\" : \"Not Found\";\n}",
        "obfuscated_code": "public String findSubstring(String a, String b) {\n    return a.contains(b) ? \"Found\" : \"Not Found\";\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
     {
        "code_id": 3,
        "original_code": "public String longestCommonSubstring(String str1, String str2) {\n    int m = str1.length(), n = str2.length();\n    int[][] dp = new int[m + 1][n + 1];\n    int length = 0, endIndex = 0;\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (str1.charAt(i - 1) == str2.charAt(j - 1)) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n                if (dp[i][j] > length) {\n                    length = dp[i][j];\n                    endIndex = i - 1;\n                }\n            }\n        }\n    }\n    return str1.substring(endIndex - length + 1, endIndex + 1);\n}",
        "obfuscated_code": "public String longestCommonSubstring(String a, String b) {\n    int c = a.length(), d = b.length();\n    int[][] e = new int[c + 1][d + 1];\n    int f = 0, g = 0;\n    for (int h = 1; h <= c; h++) {\n        for (int i = 1; i <= d; i++) {\n            if (a.charAt(h - 1) == b.charAt(i - 1)) {\n                e[h][i] = e[h - 1][i - 1] + 1;\n                if (e[h][i] > f) {\n                    f = e[h][i];\n                    g = h - 1;\n                }\n            }\n        }\n    }\n    return a.substring(g - f + 1, g + 1);\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
    {
      "code_id": 4,
      "original_code": "public int countEven(int[] numbers) {\n    int count = 0;\n    for (int number : numbers) {\n        if (number % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}",
      "obfuscated_code": "public int countEven(int[] a) {\n    int b = 0;\n    for (int c : a) {\n        if (c % 2 == 0) {\n            b++;\n        }\n    }\n    return b;\n}",
      "chatgpt_output": "",
      "clarity_score": "",
      "accuracy_score": "",
      "human_assessment_score": ""
    },
    {
      "code_id": 5,
      "original_code": "public int findMax(int[] numbers) {\n    int max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    return max;\n}",
      "obfuscated_code": "public int findMax(int[] a) {\n    int b = a[0];\n    for (int c = 1; c < a.length; c++) {\n        if (a[c] > b) {\n            b = a[c];\n        }\n    }\n    return b;\n}",
      "chatgpt_output": "",
      "clarity_score": "",
      "accuracy_score": "",
      "human_assessment_score": ""
    },
    {
      "code_id": 6,
      "original_code": "public double average(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return (double) sum / numbers.length;\n}",
      "obfuscated_code": "public double average(int[] a) {\n    int b = 0;\n    for (int c : a) {\n        b += c;\n    }\n    return (double) b / a.length;\n}",
      "chatgpt_output": "",
      "clarity_score": "",
      "accuracy_score": "",
      "human_assessment_score": ""
    },
    {
      "code_id": 7,
      "original_code": "public boolean isPalindrome(String text) {\n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text.charAt(left) != text.charAt(right)) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}",
      "obfuscated_code": "public boolean isPalindrome(String a) {\n    int b = 0;\n    int c = a.length() - 1;\n    while (b < c) {\n        if (a.charAt(b) != a.charAt(c)) {\n            return false;\n        }\n        b++;\n        c--;\n    }\n    return true;\n}",
      "chatgpt_output": "",
      "clarity_score": "",
      "accuracy_score": "",
      "human_assessment_score": ""
    },
    {
        "code_id": 8,
        "original_code": "public void reverse(int[] array) {\n    int left = 0;\n    int right = array.length - 1;\n    while (left < right) {\n        int temp = array[left];\n        array[left] = array[right];\n        array[right] = temp;\n        left++;\n        right--;\n    }\n}",
        "obfuscated_code": "public void reverse(int[] a) {\n    int b = 0;\n    int c = a.length - 1;\n    while (b < c) {\n        int d = a[b];\n        a[b] = a[c];\n        a[c] = d;\n        b++;\n        c--;\n    }\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
      {
        "code_id": 9,
        "original_code": "public int[] mergeSortedArrays(int[] array1, int[] array2) {\n    int[] result = new int[array1.length + array2.length];\n    int i = 0, j = 0, k = 0;\n    while (i < array1.length && j < array2.length) {\n        if (array1[i] < array2[j]) {\n            result[k++] = array1[i++];\n        } else {\n            result[k++] = array2[j++];\n        }\n    }\n    while (i < array1.length) {\n        result[k++] = array1[i++];\n    }\n    while (j < array2.length) {\n        result[k++] = array2[j++];\n    }\n    return result;\n}",
        "obfuscated_code": "public int[] mergeSortedArrays(int[] a, int[] b) {\n    int[] c = new int[a.length + b.length];\n    int d = 0, e = 0, f = 0;\n    while (d < a.length && e < b.length) {\n        if (a[d] < b[e]) {\n            c[f++] = a[d++];\n        } else {\n            c[f++] = b[e++];\n        }\n    }\n    while (d < a.length) {\n        c[f++] = a[d++];\n    }\n    while (e < b.length) {\n        c[f++] = b[e++];\n    }\n    return c;\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
      {
        "code_id": 10,
        "original_code": "public boolean hasDuplicates(int[] arr) {\n    for (int i = 0; i < arr.length; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i] == arr[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "obfuscated_code": "public boolean hasDuplicates(int[] a) {\n    for (int b = 0; b < a.length; b++) {\n        for (int c = b + 1; c < a.length; c++) {\n            if (a[b] == a[c]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
      {
        "code_id": 11,
        "original_code": "public int knapsack(int[] weights, int[] values, int capacity) {\n    int n = weights.length;\n    int[][] dp = new int[n + 1][capacity + 1];\n    for (int i = 0; i <= n; i++) {\n        for (int w = 0; w <= capacity; w++) {\n            if (i == 0 || w == 0) {\n                dp[i][w] = 0;\n            } else if (weights[i - 1] <= w) {\n                dp[i][w] = Math.max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);\n            } else {\n                dp[i][w] = dp[i - 1][w];\n            }\n        }\n    }\n    return dp[n][capacity];\n}",
        "obfuscated_code": "public int knapsack(int[] a, int[] b, int c) {\n    int d = a.length;\n    int[][] e = new int[d + 1][c + 1];\n    for (int f = 0; f <= d; f++) {\n        for (int g = 0; g <= c; g++) {\n            if (f == 0 || g == 0) {\n                e[f][g] = 0;\n            } else if (a[f - 1] <= g) {\n                e[f][g] = Math.max(b[f - 1] + e[f - 1][g - a[f - 1]], e[f - 1][g]);\n            } else {\n                e[f][g] = e[f - 1][g];\n            }\n        }\n    }\n    return e[d][c];\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
      {
        "code_id": 12,
        "original_code": "public boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "obfuscated_code": "public boolean isPrime(int a) {\n    if (a <= 1) {\n        return false;\n    }\n    for (int b = 2; b <= Math.sqrt(a); b++) {\n        if (a % b == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
      {
        "code_id": 13,
        "original_code": "public String reverseString(String str) {\n    StringBuilder reversed = new StringBuilder();\n    for (int i = str.length() - 1; i >= 0; i--) {\n        reversed.append(str.charAt(i));\n    }\n    return reversed.toString();\n}",
        "obfuscated_code": "public String reverseString(String a) {\n    StringBuilder b = new StringBuilder();\n    for (int c = a.length() - 1; c >= 0; c--) {\n        b.append(a.charAt(c));\n    }\n    return b.toString();\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
      {
        "code_id": 14,
        "original_code": "public boolean isAnagram(String str1, String str2) {\n    if (str1.length() != str2.length()) {\n        return false;\n    }\n    char[] arr1 = str1.toCharArray();\n    char[] arr2 = str2.toCharArray();\n    Arrays.sort(arr1);\n    Arrays.sort(arr2);\n    return Arrays.equals(arr1, arr2);\n}",
        "obfuscated_code": "public boolean isAnagram(String a, String b) {\n    if (a.length() != b.length()) {\n        return false;\n    }\n    char[] c = a.toCharArray();\n    char[] d = b.toCharArray();\n    Arrays.sort(c);\n    Arrays.sort(d);\n    return Arrays.equals(c, d);\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
      
      {
       "code_id": 15,
        "original_code": "public boolean containsCharacter(String text, char character) {\n    return text.indexOf(character) != -1;\n}",
        "obfuscated_code": "public boolean containsCharacter(String a, char b) {\n    return a.indexOf(b) != -1;\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
      
      {
        "code_id": 16,
        "original_code": "public boolean solveMaze(int[][] maze, int x, int y, int[][] solution) {\n    if (x == maze.length - 1 && y == maze[0].length - 1 && maze[x][y] == 1) {\n        solution[x][y] = 1;\n        return true;\n    }\n    if (x >= 0 && y >= 0 && x < maze.length && y < maze[0].length && maze[x][y] == 1) {\n        if (solution[x][y] == 1) return false;\n        solution[x][y] = 1;\n        if (solveMaze(maze, x + 1, y, solution)) return true;\n        if (solveMaze(maze, x, y + 1, solution)) return true;\n        solution[x][y] = 0;\n        return false;\n    }\n    return false;\n}",
        "obfuscated_code": "public boolean solveMaze(int[][] a, int b, int c, int[][] d) {\n    if (b == a.length - 1 && c == a[0].length - 1 && a[b][c] == 1) {\n        d[b][c] = 1;\n        return true;\n    }\n    if (b >= 0 && c >= 0 && b < a.length && c < a[0].length && a[b][c] == 1) {\n        if (d[b][c] == 1) return false;\n        d[b][c] = 1;\n        if (solveMaze(a, b + 1, c, d)) return true;\n        if (solveMaze(a, b, c + 1, d)) return true;\n        d[b][c] = 0;\n        return false;\n    }\n    return false;\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
      {
        "code_id": 17,
        "original_code": "public void quickSort(int[] arr, int low, int high) {\n    if (low < high) {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\nprivate int partition(int[] arr, int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    for (int j = low; j < high; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp;\n        }\n    }\n    int temp = arr[i + 1]; arr[i + 1] = arr[high]; arr[high] = temp;\n    return i + 1;\n}",
        "obfuscated_code": "public void quickSort(int[] a, int b, int c) {\n    if (b < c) {\n        int d = partition(a, b, c);\n        quickSort(a, b, d - 1);\n        quickSort(a, d + 1, c);\n    }\n}\nprivate int partition(int[] a, int b, int c) {\n    int d = a[c];\n    int e = b - 1;\n    for (int f = b; f < c; f++) {\n        if (a[f] < d) {\n            e++;\n            int g = a[e]; a[e] = a[f]; a[f] = g;\n        }\n    }\n    int g = a[e + 1]; a[e + 1] = a[c]; a[c] = g;\n    return e + 1;\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
      {
        "code_id": 18,
        "original_code": "public int[] dijkstra(int[][] graph, int source) {\n    int n = graph.length;\n    int[] dist = new int[n];\n    Arrays.fill(dist, Integer.MAX_VALUE);\n    dist[source] = 0;\n    PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));\n    pq.offer(new int[] { source, 0 });\n    while (!pq.isEmpty()) {\n        int[] current = pq.poll();\n        int u = current[0], d = current[1];\n        if (d > dist[u]) continue;\n        for (int v = 0; v < n; v++) {\n            if (graph[u][v] != 0) {\n                int newDist = dist[u] + graph[u][v];\n                if (newDist < dist[v]) {\n                    dist[v] = newDist;\n                    pq.offer(new int[] { v, newDist });\n                }\n            }\n        }\n    }\n    return dist;\n}",
        "obfuscated_code": "public int[] dijkstra(int[][] a, int b) {\n    int c = a.length;\n    int[] d = new int[c];\n    Arrays.fill(d, Integer.MAX_VALUE);\n    d[b] = 0;\n    PriorityQueue<int[]> e = new PriorityQueue<>(Comparator.comparingInt(f -> f[1]));\n    e.offer(new int[] { b, 0 });\n    while (!e.isEmpty()) {\n        int[] f = e.poll();\n        int g = f[0], h = f[1];\n        if (h > d[g]) continue;\n        for (int i = 0; i < c; i++) {\n            if (a[g][i] != 0) {\n                int j = d[g] + a[g][i];\n                if (j < d[i]) {\n                    d[i] = j;\n                    e.offer(new int[] { i, j });\n                }\n            }\n        }\n    }\n    return d;\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
      {
        "code_id": 19,
        "original_code": "public String removeWhitespace(String input) {\n    StringBuilder output = new StringBuilder();\n    for (int i = 0; i < input.length(); i++) {\n        if (input.charAt(i) != ' ') {\n            output.append(input.charAt(i));\n        }\n    }\n    return output.toString();\n}",
        "obfuscated_code": "public String removeWhitespace(String a) {\n    StringBuilder b = new StringBuilder();\n    for (int c = 0; c < a.length(); c++) {\n        if (a.charAt(c) != ' ') {\n            b.append(a.charAt(c));\n        }\n    }\n    return b.toString();\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      },
      {
        "code_id": 20,
        "original_code": "public String reverseWords(String sentence) {\n    String[] words = sentence.split(\" \");\n    StringBuilder reversedSentence = new StringBuilder();\n    for (int i = words.length - 1; i >= 0; i--) {\n        reversedSentence.append(words[i]).append(\" \");\n    }\n    return reversedSentence.toString().trim();\n}",
        "obfuscated_code": "public String reverseWords(String a) {\n    String[] b = a.split(\" \");\n    StringBuilder c = new StringBuilder();\n    for (int d = b.length - 1; d >= 0; d--) {\n        c.append(b[d]).append(\" \");\n    }\n    return c.toString().trim();\n}",
        "chatgpt_output": "",
        "clarity_score": "",
        "accuracy_score": "",
        "human_assessment_score": ""
      }
      
  ]


  
  